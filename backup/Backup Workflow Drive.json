{
  "active": true,
  "connections": {
    "If1": {
      "main": [
        [
          {
            "node": "Get Folder ID - Month",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Month Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "Mês",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Folder ID - Day",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Day Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Parser and Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DataFormatada": {
      "main": [
        [
          {
            "node": "Search Month Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mês": {
      "main": [
        [
          {
            "node": "DataFormatada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Month Folder": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Month Folder": {
      "main": [
        [
          {
            "node": "Get Folder ID - Month",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Day Folder": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Day Folder": {
      "main": [
        [
          {
            "node": "Get Folder ID - Day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder ID - Day": {
      "main": [
        [
          {
            "node": "Get all workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder ID - Month": {
      "main": [
        [
          {
            "node": "Search Day Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parser and Binary": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-01T19:28:14.427Z",
  "id": "wyXBRT1xpKqvGCHt",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Backup Workflow Drive",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75f9532a-cbe0-4f5f-9333-6f0e3037b075",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('Mês').item.json.mes_extenso }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        448,
        -16
      ],
      "id": "da35cc9b-cd4d-43f1-91e5-c9d7ef0fdfdb",
      "name": "If1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "outputFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -272,
        -16
      ],
      "id": "dfb29dce-5f6f-497b-b3d1-5d0e31f64e26",
      "name": "Data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75f9532a-cbe0-4f5f-9333-6f0e3037b075",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('DataFormatada').item.json.dataFormatada }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1120,
        -32
      ],
      "id": "112b0f3c-0988-4ada-b3bc-bf8f34967463",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "name": "={{ $json.filename }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Get Folder ID - Day').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2432,
        -32
      ],
      "id": "464fe996-04e7-4ab7-b384-ed8e2db5099e",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1824,
        -48
      ],
      "id": "f7084014-a822-426e-b9fa-3f42aec0c478",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Obtém a data original em string e converte para objeto Date\nconst inputDateStr = $('Data').first().json.data;\nconst inputDate = new Date(inputDateStr);\n\n// Subtrai 1 hora manualmente (ajuste de -04:00 para -03:00)\ninputDate.setHours(inputDate.getHours() - 3);\n\n// Formata a data no padrão brasileiro\nconst dia = String(inputDate.getDate()).padStart(2, '0');\nconst mes = String(inputDate.getMonth() + 1).padStart(2, '0');\nconst ano = inputDate.getFullYear();\nconst hora = String(inputDate.getHours()).padStart(2, '0');\nconst minuto = String(inputDate.getMinutes()).padStart(2, '0');\n\nconst dataFormatada = `${dia}`;\n\n// Retorna resultado\nreturn [\n  {\n    json: {\n      dataFormatada\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        64,
        -16
      ],
      "id": "cd6467af-c5bd-48b5-9966-53714de77ead",
      "name": "DataFormatada"
    },
    {
      "parameters": {
        "jsCode": "//If you want the months in English, just change the values below.\nconst meses = [\n  'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',\n  'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'\n];\n\nreturn items.map(item => {\n  const data = new Date(item.json.data);\n\n  // Ajuste de fuso se necessário:\n  // data.setHours(data.getHours() - 4);\n\n  const mesExtenso = meses[data.getMonth()];\n  const mesCapitalizado = mesExtenso.charAt(0).toUpperCase() + mesExtenso.slice(1);\n\n  item.json.mes_extenso = mesCapitalizado;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        -16
      ],
      "id": "4045db52-a779-4464-926a-fa8f2ceebb93",
      "name": "Mês"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mês').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
            "mode": "list",
            "cachedResultName": "N8N",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        256,
        -16
      ],
      "id": "61cf40a9-d8c9-4cc3-ac33-6da456cdb08d",
      "name": "Search Month Folder",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Mês').item.json.mes_extenso }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
          "mode": "list",
          "cachedResultName": "N8N",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        576,
        96
      ],
      "id": "a7e04bbd-ce56-4b1d-ac89-b6d33ba333c2",
      "name": "Create Month Folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('DataFormatada').item.json.dataFormatada }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        928,
        -32
      ],
      "id": "e7745705-29dc-4272-91ca-3073ec2ca5d6",
      "name": "Search Day Folder",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('DataFormatada').item.json.dataFormatada }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Get Folder ID - Month').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1248,
        80
      ],
      "id": "65da67f0-fbef-4096-9ebe-2baccfd08086",
      "name": "Create Day Folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('DataFormatada').item.json.dataFormatada }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "={{ $('Get Folder ID - Month').item.json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1392,
        -48
      ],
      "id": "0212af75-6e1d-4087-9c57-cfed426a50a8",
      "name": "Get Folder ID - Day",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mês').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
            "mode": "list",
            "cachedResultName": "N8N",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        720,
        -32
      ],
      "id": "657ed5e2-db40-4040-8e14-c5d6275e16ea",
      "name": "Get Folder ID - Month",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        1616,
        -48
      ],
      "id": "256359f4-b24c-47a2-8f29-f9969008e397",
      "name": "Get all workflows",
      "credentials": {
        "n8nApi": {
          "id": "PhzAMHGr91UsyfXp",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function node (NOT \"Function Item\")\n\n/**\n * Ordena chaves de um objeto de forma recursiva.\n * Também tenta ordenar arrays de objetos por campos comuns (name, id, key).\n */\nconst deepOrder = (val) => {\n  if (Array.isArray(val)) {\n    // Tenta ordenar arrays de objetos por campos determinísticos\n    const allObjects = val.every(v => v && typeof v === 'object' && !Array.isArray(v));\n    if (allObjects) {\n      const sortKey = (o) => {\n        if (o.name !== undefined) return `name:${String(o.name)}`;\n        if (o.id !== undefined) return `id:${String(o.id)}`;\n        if (o.key !== undefined) return `key:${String(o.key)}`;\n        // fallback estável: JSON com chaves ordenadas\n        return JSON.stringify(deepOrder(o));\n      };\n      return [...val].sort((a, b) => sortKey(a).localeCompare(sortKey(b))).map(deepOrder);\n    }\n    // Arrays primitivos: mantém ordem de entrada\n    return val.map(deepOrder);\n  }\n\n  if (val && typeof val === 'object') {\n    const ordered = {};\n    Object.keys(val).sort().forEach(k => {\n      ordered[k] = deepOrder(val[k]);\n    });\n    return ordered;\n  }\n\n  return val; // primitivos\n};\n\n/**\n * Normalizações leves específicas de n8n para consistência visual:\n * - Ordena \"nodes\" por name -> id\n * - Ordena \"credentials\" por nome da credencial\n * - Ordena \"pinData\" por chave\n * - Ordena \"meta\" e \"settings\" (já coberto pelo deepOrder)\n */\nconst normalizeN8n = (wf) => {\n  const w = { ...wf };\n\n  if (Array.isArray(w.nodes)) {\n    w.nodes = [...w.nodes].sort((a, b) => {\n      const ak = `${a.name ?? ''}#${a.id ?? ''}`;\n      const bk = `${b.name ?? ''}#${b.id ?? ''}`;\n      return ak.localeCompare(bk);\n    });\n  }\n\n  if (w.credentials && typeof w.credentials === 'object') {\n    const keys = Object.keys(w.credentials).sort();\n    const newCreds = {};\n    for (const k of keys) newCreds[k] = w.credentials[k];\n    w.credentials = newCreds;\n  }\n\n  if (w.pinData && typeof w.pinData === 'object') {\n    const keys = Object.keys(w.pinData).sort();\n    const newPin = {};\n    for (const k of keys) newPin[k] = w.pinData[k];\n    w.pinData = newPin;\n  }\n\n  return w;\n};\n\n// 1) Obter a fonte do workflow (objeto direto ou string JSON em \"data\")\nconst in0 = $input.all()[0];\nlet workflowRaw = in0.json;\n\n// Se veio como string crua em \"data\", parseia\nif (typeof in0.json?.data === 'string') {\n  try {\n    workflowRaw = JSON.parse(in0.json.data);\n  } catch (e) {\n    throw new Error('Campo \"data\" não é um JSON válido.');\n  }\n}\n\n// 2) Normalização + ordenação profunda\nconst normalized = normalizeN8n(workflowRaw);\nconst ordered = deepOrder(normalized);\n\n// 3) Pretty-print\nconst pretty = JSON.stringify(ordered, null, 2);\n\n// 4) Saída em JSON legível e também como binário para download\nconst filename = (ordered.meta?.name || ordered.name || 'workflow') + '.json';\n\nconst item = {\n  json: {\n    formatted_workflow: pretty,\n    filename,\n    note: 'Use esta string para salvar/baixar ou importar no n8n.'\n  },\n  binary: {\n    data: {\n      data: Buffer.from(pretty).toString('base64'),\n      fileName: filename,\n      mimeType: 'application/json'\n    }\n  }\n};\n\nreturn [item];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        -32
      ],
      "id": "955fa80f-87ee-4ab0-9b25-815f578c3299",
      "name": "Parser and Binary"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -464,
        -16
      ],
      "id": "63f6e4e2-6bc2-487e-b6f3-4bba151dfd8f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "🟡 INÍCIO & DATA - Manual Trigger → dispara backup on-demand. \nData → gera timestamp base.\n→ extrai Mês (por extenso) e Dia (DD) com ajuste de fuso (-3h).",
        "height": 268,
        "width": 684,
        "color": null
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -496,
        -112
      ],
      "id": "35364b18-5e14-4a2e-b910-f69d4a4507cd",
      "name": "NOTE • Início & Data"
    },
    {
      "parameters": {
        "content": "🟦 ESTRUTURA DE PASTAS (Google Drive)\nBusca pasta do MÊS\nSe não existir, cria.\nDepois busca/cria subpasta do DIA.",
        "height": 384,
        "width": 1320,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        224,
        -128
      ],
      "id": "3c712103-682a-44fa-a290-e6da5a903326",
      "name": "NOTE • Pastas no Drive"
    },
    {
      "parameters": {
        "content": "🟩 COLETA & LOTEAMENTO (n8n API)\nGet many workflows → lista todos os workflows.\nLoop Over Items → processa em lotes seguros.",
        "height": 276,
        "width": 496,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        -144
      ],
      "id": "e18d54c5-49f5-4be8-a9d5-f761d0da6346",
      "name": "NOTE • Coleta & Lotes"
    },
    {
      "parameters": {
        "content": "🟥 NORMALIZAÇÃO & UPLOAD \nParser → ordena chaves/arrays (determinístico) e gera JSON bonito.\\\nUpload file → salva <nome>.json na pasta do DIA.",
        "height": 284,
        "width": 488,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2096,
        -144
      ],
      "id": "67c394b2-49bd-44fe-83c6-9c1490901343",
      "name": "NOTE • Normalização & Upload"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-01T19:28:14.451Z",
      "updatedAt": "2025-09-01T19:28:14.451Z",
      "role": "workflow:owner",
      "workflowId": "wyXBRT1xpKqvGCHt",
      "projectId": "O2voI4XYg26wWumH"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-08T15:10:26.000Z",
  "versionId": "73cbb156-3eae-4c63-8d36-355ac378e25a"
}
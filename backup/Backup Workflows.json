{
  "active": false,
  "connections": {
    "Return": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Workflows": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Search files and folders2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create folder1": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create folder1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "Mes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mes1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create folder": {
      "main": [
        [
          {
            "node": "Search files and folders3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Search files and folders3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Search files and folders1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-29T18:57:15.439Z",
  "id": "SFifw1YEpm1nMkzn",
  "isArchived": false,
  "meta": null,
  "name": "Backup Workflows",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "0df996d2-3a6b-4c0d-9edb-e3463ab7be29",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        544,
        320
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "ed725839-8d1f-4fd0-ac64-a376aa36ccc0",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -128,
        128
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Config').item.json.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Config').item.json.repo_name }}"
        },
        "filePath": "={{ $('Config').item.json.sub_path }}/{{$('Loop Over Items').item.json.name}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Loop Over Items').item.json.name}} ({{$json.github_status}})"
      },
      "id": "9f4edd7c-b168-44f0-a9fb-bd7ee153e890",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        320,
        128
      ],
      "webhookId": "b440dead-fad0-4546-8ca7-201aa2ea2936",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "cudddw6XIvtNsVXV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Config').item.json.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "n8n-workflows"
        },
        "filePath": "={{ $('Config').item.json.sub_path }}/{{$('Loop Over Items').item.json.name}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Loop Over Items').item.json.name}} ({{$json.github_status}})"
      },
      "id": "70702a59-1aa3-4ad4-b863-59e7a089becb",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        320,
        -96
      ],
      "webhookId": "1dfc4103-7c23-4814-a0b5-dd4f5a96d36b",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "cudddw6XIvtNsVXV",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "bb64ed2c-5193-4b8f-a9e8-55cb83ea244c",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              },
              "leftValue": "={{ $json.updatedAt }}",
              "rightValue": "={{ $now.minus(1, 'days') }}"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "808bd4f5-2e3a-43e6-b1f8-6c7735e11e2f",
      "name": "Filter",
      "type": "n8n-nodes-base.filter",
      "position": [
        -1888,
        128
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6655f56f-b447-43eb-84a2-be8b71524af7",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "different"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Different"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fd0fcdea-e8c0-42be-ba51-5cd2b71ed247",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "new"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "New"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ca3b1c68-d756-4de5-b69b-147526e19e35",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "same"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Same"
            }
          ]
        },
        "options": {}
      },
      "id": "a71db645-84e4-473a-bd66-67622780e67f",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        96,
        128
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "f396afa6-64d3-4dec-846b-695631e36c84",
      "name": "Get Workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -2032,
        128
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "PhzAMHGr91UsyfXp",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "03f51f9c-4681-4423-91d2-d32f4c18d6bc",
              "name": "repo_owner",
              "type": "string",
              "value": "DaviTKS"
            },
            {
              "id": "0c9b521a-b698-4b43-9eb0-bbf744760158",
              "name": "repo_name",
              "type": "string",
              "value": "n8n-workflows"
            },
            {
              "id": "91627e70-a71a-4be0-a6f6-b04d5c8469d8",
              "name": "repo_path",
              "type": "string",
              "value": "n8n-workflows"
            },
            {
              "id": "983a2c87-9d69-4d64-ab88-ec1b1117c6e6",
              "name": "sub_path",
              "type": "string",
              "value": "backup"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "aee09b23-243c-4db5-907a-eb28a9841fc4",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        -2176,
        128
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "2fa45cd1-c6ac-4619-8003-a2096850f17f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3840,
        128
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "4f01ac7c-b596-4eca-bc03-bbddd64826d5",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -608,
        -160
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "27c9a3c4-9809-4343-b498-3a6d9bee3695",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1664,
        128
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Mes1').item.json.mes_extenso }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
          "mode": "list",
          "cachedResultName": "N8N",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2672,
        240
      ],
      "id": "21f6945c-1343-4f32-bd0f-f38bdbb09737",
      "name": "Create folder1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75f9532a-cbe0-4f5f-9333-6f0e3037b075",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('Mes1').item.json.mes_extenso }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2800,
        128
      ],
      "id": "b9558e57-f684-4b92-b96a-5e53267f8a4d",
      "name": "If1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mes1').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
            "mode": "list",
            "cachedResultName": "N8N",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2976,
        128
      ],
      "id": "02293e55-636b-414c-b2d4-d203ebbaf2f9",
      "name": "Search files and folders1",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mes1').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
            "mode": "list",
            "cachedResultName": "N8N",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2528,
        128
      ],
      "id": "aac91ff1-6bb7-4fa4-b226-15033e0a137c",
      "name": "Search files and folders",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "outputFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -3664,
        128
      ],
      "id": "7aaaed29-ebe9-465c-bef8-1a1bb372d323",
      "name": "Data"
    },
    {
      "parameters": {
        "jsCode": "const meses = [\n  'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',\n  'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'\n];\n\nreturn items.map(item => {\n  const data = new Date(item.json.data);\n\n  // Ajuste de fuso se necessário:\n  // data.setHours(data.getHours() - 4);\n\n  const mesExtenso = meses[data.getMonth()];\n  const mesCapitalizado = mesExtenso.charAt(0).toUpperCase() + mesExtenso.slice(1);\n\n  item.json.mes_extenso = mesCapitalizado;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3504,
        128
      ],
      "id": "3450da45-0097-4596-9dc5-92579bf172ad",
      "name": "Mes1"
    },
    {
      "parameters": {
        "jsCode": "// Obtém a data original em string e converte para objeto Date\nconst inputDateStr = $('Data').first().json.data;\nconst inputDate = new Date(inputDateStr);\n\n// Subtrai 1 hora manualmente (ajuste de -04:00 para -03:00)\ninputDate.setHours(inputDate.getHours() - 3);\n\n// Formata a data no padrão brasileiro\nconst dia = String(inputDate.getDate()).padStart(2, '0');\nconst mes = String(inputDate.getMonth() + 1).padStart(2, '0');\nconst ano = inputDate.getFullYear();\nconst hora = String(inputDate.getHours()).padStart(2, '0');\nconst minuto = String(inputDate.getMinutes()).padStart(2, '0');\n\nconst dataFormatada = `${dia}/${mes}/${ano}`;\n\n// Retorna resultado\nreturn [\n  {\n    json: {\n      dataFormatada\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3328,
        128
      ],
      "id": "17d6dc3a-212a-4ced-88c2-f04080565142",
      "name": "Code1"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Mes1').item.json.mes_extenso }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
          "mode": "list",
          "cachedResultName": "N8N",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1136,
        256
      ],
      "id": "8100bf09-e423-4226-af3f-2bf9df9de87b",
      "name": "Create folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75f9532a-cbe0-4f5f-9333-6f0e3037b075",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('Mes1').item.json.mes_extenso }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1264,
        144
      ],
      "id": "b3988ade-a617-440e-8508-ce598d5ad58d",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mes1').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "={{ $('Search files and folders').item.json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1440,
        144
      ],
      "id": "3b602322-7a38-49e9-8777-6cd383be91ef",
      "name": "Search files and folders2",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Mes1').item.json.mes_extenso }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y",
            "mode": "list",
            "cachedResultName": "N8N",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1kQwcj-KfD3PoV2CXdGE9VlKUW0qOM03y"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -992,
        144
      ],
      "id": "e092df92-6048-4c0d-a665-40458b38eef4",
      "name": "Search files and folders3",
      "alwaysOutputData": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "1ib4QgSSisyBlll3",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtém a data original em string e converte para objeto Date\nconst inputDateStr = $('Data').first().json.data;\nconst inputDate = new Date(inputDateStr);\n\n// Subtrai 1 hora manualmente (ajuste de -04:00 para -03:00)\ninputDate.setHours(inputDate.getHours() - 3);\n\n// Formata a data no padrão brasileiro\nconst dia = String(inputDate.getDate()).padStart(2, '0');\nconst mes = String(inputDate.getMonth() + 1).padStart(2, '0');\nconst ano = inputDate.getFullYear();\nconst hora = String(inputDate.getHours()).padStart(2, '0');\nconst minuto = String(inputDate.getMinutes()).padStart(2, '0');\n\nconst dataFormatada = `${dia}`;\n\n// Retorna resultado\nreturn [\n  {\n    json: {\n      dataFormatada\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3152,
        128
      ],
      "id": "7b7e6df1-34e1-4f06-a308-d860b009a43f",
      "name": "Code"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-29T18:57:15.448Z",
      "updatedAt": "2025-08-29T18:57:15.448Z",
      "role": "workflow:owner",
      "workflowId": "SFifw1YEpm1nMkzn",
      "projectId": "O2voI4XYg26wWumH"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-29T19:08:27.000Z",
  "versionId": "f454fe18-4bc8-4750-b3fd-492fc19ff0f0"
}
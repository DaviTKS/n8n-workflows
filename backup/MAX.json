{
  "active": true,
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "valores": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Redis4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Z-API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estrutura": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Get MsgID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "Get MsgID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lead": {
      "main": [
        [
          {
            "node": "Mensagem Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem Lead": {
      "main": [
        [
          {
            "node": "IF FromMe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Grp ou Msg": {
      "main": [
        [
          {
            "node": "Filtro Davi",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Que Grp?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Que Grp?": {
      "main": [
        [
          {
            "node": "Ger. Produtos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Horário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtro Davi": {
      "main": [
        [
          {
            "node": "Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TXT or AUD": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Avaliador",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Avaliador": {
      "main": [
        [
          {
            "node": "Redis6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Msg ID Buffer 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Redis5": {
      "main": [
        [
          {
            "node": "TXT or AUD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "status": {
      "main": [
        [
          {
            "node": "Redis5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetStat": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Get Buffer 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Funcionamento": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Deleta Buffer": {
      "main": [
        [
          {
            "node": "Join",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer 1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer 2": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Criar Cliente": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Criar Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        []
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "TXT or AUD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ger. Produtos": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Horário": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1o Nome": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "Mes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mes1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Sauda2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sauda2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        []
      ]
    },
    "If Redis OK1": {
      "main": [
        [
          {
            "node": "Lock process1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Get Buffer 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Não encaminhada1": {
      "main": [
        [
          {
            "node": "Check Lock Too1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encaminhada1": {
      "main": [
        [
          {
            "node": "Check Lock1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop1": {
      "main": [
        [],
        [
          {
            "node": "Get Buffer ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lock process1": {
      "main": [
        [
          {
            "node": "Deleta Buffer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Encaminhada1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Não encaminhada1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Lock1": {
      "main": [
        [
          {
            "node": "If Redis OK1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer ": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer 3": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Lock Too1": {
      "main": [
        [
          {
            "node": "If Redis OK1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "1o Nome",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "1o Nome",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Deleta Buffer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Buffer 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Buffer 4": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [],
        [
          {
            "node": "Organização3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organização3": {
      "main": [
        [
          {
            "node": "Get Buffer 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete MSG ID Buffer": {
      "main": [
        [
          {
            "node": "Get Buffer 4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "Delete MSG ID Buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis4": {
      "main": [
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis6": {
      "main": [
        [
          {
            "node": "GetStat1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Del DB Tmp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Redis10": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Del DB Tmp": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Relat. Cesar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Relat. Nei",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Relat. Davi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Redis10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetStat1": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF FromMe": {
      "main": [
        [
          {
            "node": "IF Not From Max",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Buffer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Not From Max": {
      "main": [
        [
          {
            "node": "Block Agente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get MsgID": {
      "main": [
        [
          {
            "node": "If MsgID OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If MsgID OK": {
      "main": [
        [
          {
            "node": "Get Buffer 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [],
        [
          {
            "node": "Grp ou Msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "GetStat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis11": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Avaliador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Z-API1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-02T01:36:18.113Z",
  "id": "ZJhekDsrE4hWhX5f",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "MAX",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Join').item.json.mensagens }}",
        "options": {
          "systemMessage": "=🤖 IDENTIDADE E PAPEL\nVocê é o \"Max\", um assistente de suporte técnico que se destaca pela inteligência e eficiência. Sua principal habilidade é entender o contexto da conversa para evitar perguntas desnecessárias e resolver a triagem do chamado o mais rápido possível.\n\n🎯 OBJETIVO\n\nColetar as informações necessárias da forma mais rápida e natural possível.\n\nEvitar a todo custo repetir perguntas ou pedir informações que já foram fornecidas.\n\nIdentificar e priorizar emergências.\n\nEncerrar a conversa com a frase-gatilho para acionar o próximo passo do fluxo.\n\n💬 TOM E ESTILO\n\nInteligente e Eficiente: Mostre que você entende o contexto.\n\nProfissional e Direto: Mantenha um tom cortês, mas focado.\n\nNatural: Evite linguagem robótica. Use variações para as perguntas.\n\n🚨 REGRA DE PRIORIDADE MÁXIMA: DETECÇÃO DE EMERGÊNCIA\nInstrução: Antes de seguir qualquer outro passo, analise a mensagem do cliente em busca de palavras que indiquem uma emergência grave (\"fogo\", \"fumaça\", \"vírus\", \"invasão\", etc.).\nAÇÃO IMEDIATA: Se detectar uma emergência, ignore todo o roteiro. Responda com uma frase que demonstre urgência e então use a frase-gatilho para encerrar imediatamente.\nExemplo de Ação: \"Entendido, {{ $('1o Nome').item.json.primeiroNome }}. Isso é uma emergência. Estarei enviando o Ticket agora, tudo bem?\"\n\nLÓGICA DA CONVERSA (Com Memória e Análise Inteligente)\nInstrução Principal: Sua lógica de conversa deve ser inteligente para não repetir perguntas. Siga esta ordem:E\n\n1. É UMA EMERGÊNCIA?\n\nIRA SIM: Siga a \"AÇÃO IMEDIATA\" da Regra de Emergência e encerre.\n\nSE NÃO: Prossiga para o passo 2.RO\n\n2. A CONVERSA JÁ COMEÇOU? (Verificar Memória N8N)\n\n\n\n SIM: A conversa está em andamento. Analise última resposta do cliente e faça a próxima pergunta necessária (ou sobre impacto, ou o encerramento).NNÃO cumprimente de novo.\n\nSE NÃO (PRIMEIRO CONTATO): Prossiga para o passo 3.\n\n3. ANÁLISE DO PRIMEIRO CONTATO (O que o cliente já disse?)\n\nInstrução: Analise a primeira mensagem do cliente para ver o que ele já informou.\n\nCenário A: Problema E Impacto JÁ INFORMADOS (Ex: \"O servidor parou e ninguém na empresa consegue trabalhar\")\n\nAção: Vá direto para o \"ENCERRAMENTO COM GATILHO\".\n\nCenário B: Apenas o Problema informado (Ex: \"O PC queimou\")(\n\nAção: Confirme o entendimento e vá para \"MEDIR O IMPACTO\".\n\nCenário C: Apenas um \"Oi\" ou nada específico\n\nAção: Cumprimente e vá para \"DESCREVER O PROBLEMA\".\n\nETAPAS DA CONVERSA (Use conforme a lógica acima)\nA. DESCREVER O PROBLEMA:\n\nInstrução: Peça ao cliente para detalhare  CONTINUAÇiga com a próx aqui: \"Olá, {{ $('1o Nome').item.json.primeiroNome }}. Aqui é o Max, do suporte. Por favor, qual o problema?\"\n\nB.saber: o problema é individual ou afeta mais pessoas na equipe?\"\n\n4. ENCERRAMENTO COM GATILHO:\n\nInstrução: Assim que tiver a resposta sobre o impacto, sua única e final resposta deve ser a frase exata abaixo.\n\nFrase Obrigatória: Estarei enviando o Ticket agora, tudo bem?"
        }
      },
      "id": "3645f013-6308-4f2f-8da6-e2b458600619",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -2864,
        -848
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recebetext1",
        "options": {}
      },
      "id": "8086922d-989b-46bd-82d1-d2393830b725",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -11456,
        -480
      ],
      "webhookId": "bc978142-377f-4daf-b31e-3390dc1be1df"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "produtos",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -2672,
        -640
      ],
      "id": "c508dc6e-f92c-4012-8466-5c0c03835b11",
      "name": "valores",
      "credentials": {
        "supabaseApi": {
          "id": "r7qiHeLbj3sFTwB4",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        -2240,
        -688
      ],
      "id": "33915451-16f6-46cb-a942-4a66cb7976b0",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<mensagem_do_usuario>\n{{ $json.output }}\n</mensagem_do_usuario>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Você vai receber um conjunto de mensagens de um usuário. Seu objetivo é estruturá-las em JSON no seguinte formato:\n\n{\n  \"mensagens\": [\"Mensagem 0\", \"Mensagem 1\", \"Mensagem 2\"]\n}\n\nRegras de separação:\n\n1. Agrupe mensagens curtas (menos de 50 caracteres) com a mensagem anterior, para que o texto fique natural e humanizado.\n2. Separe mensagens apenas se houver mudança de assunto ou pausa natural no diálogo.\n3. Nunca separe mensagens apenas por vírgulas ou palavras pequenas.\n4. Mantenha sentenças completas; nunca corte uma frase no meio.\n5. Não adicione nem remova conteúdo, apenas reorganize para humanizar a leitura.\n6. Mantenha a pontuação e maiúsculas como estão.\n7. As mensagens NUNCA podem conter \"\\n\" em seu texto.\n\nExemplo:\n\nInput:\n\"Ótimo! Sim, consertamos notebooks. Para avançarmos, pode me confirmar o modelo exato do Dell (por exemplo, Dell Inspiron 15 5000, Dell XPS 13, etc.)? Isso ajuda a verificar com o técnico.\"\n\nOutput:\n{\n  \"mensagens\": [\n    \"Ótimo! Sim, consertamos notebooks.\",\n    \"Para avançarmos, pode me confirmar o modelo exato do Dell (por exemplo, Dell Inspiron 15 5000, Dell XPS 13, etc.)? Isso ajuda a verificar com o técnico.\"\n  ]\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -2352,
        -848
      ],
      "id": "48a666d5-0581-4140-9c89-c581e8c8f5bb",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.mensagens",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1792,
        -928
      ],
      "id": "68dcf40c-b3f0-4e70-90ed-c7d7c9ae93b7",
      "name": "Split Out",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4544,
        -336
      ],
      "id": "9588c559-a130-46e3-87b4-630275301816",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"mensagens\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t},\n  \"required\": [\"mensagens\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2160,
        -480
      ],
      "id": "c34aa3d3-173b-48bb-9c51-21b9fb2ce3ef",
      "name": "Estrutura"
    },
    {
      "parameters": {
        "url": "={{ $('Webhook').item.json.body.msgContent.audioMessage.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6752,
        -384
      ],
      "id": "58be5e4d-525b-4b50-90b6-10bb86c4727f",
      "name": "HTTP Request",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "pt"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -6560,
        -384
      ],
      "id": "31b4e0b5-d48e-4bbd-ad65-1325e333bc66",
      "name": "OpenAI",
      "executeOnce": true,
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Lead').item.json.Telefone }}_buffer",
        "messageData": "={{ $('Mensagem Lead').item.json.Mensagem }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -6560,
        -544
      ],
      "id": "01543d1e-2d09-42c3-a98f-8eec6035a374",
      "name": "Redis",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Lead').item.json.Telefone }}_buffer",
        "messageData": "={{ $json.text }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -6336,
        -384
      ],
      "id": "3c98cc00-871b-4d64-8291-94c135fa699d",
      "name": "Redis3",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "701b4e56-bead-4f6e-8811-c2ba1ba41152",
              "name": "Nome",
              "value": "={{ $json.body.senderName }}",
              "type": "string"
            },
            {
              "id": "f6e77a5a-e114-4144-ba1e-aae22aa2cc44",
              "name": "Telefone",
              "value": "={{ $json.body.phone }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -10720,
        -480
      ],
      "id": "2d1b61f8-046d-4c93-a4b4-7c6d4a4fdd8c",
      "name": "Lead"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8157da41-080f-4f0c-98cd-b1dbcacca0b4",
              "name": "Mensagem",
              "value": "={{ $('Webhook').item.json.body.text.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -10576,
        -480
      ],
      "id": "725e50bc-7b89-465c-80d0-65ab7534cf0a",
      "name": "Mensagem Lead"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "gAJtfonhRkafnpB6",
          "mode": "list",
          "cachedResultName": "My project — Gerenciador Produtos"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -10208,
        32
      ],
      "id": "9688c387-b4d0-42ac-90f7-a76b3dd87ffc",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ca0ede51-ecde-4e1f-879a-946a2fda65eb",
                    "leftValue": "={{ $json.body.isGroup }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.isGroup }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c0eba5d2-a7df-4916-bec0-ed0ced47910a"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -11056,
        -480
      ],
      "id": "ca671a45-ec2c-4a7b-b6fa-055a12ee04df",
      "name": "Grp ou Msg"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.data.message.senderKeyDistributionMessage.groupId }}",
                    "rightValue": "120363420981315626@g.us",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7fea6677-bfe5-47f4-8724-8f8b3edb3d98"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e511c57c-9c85-41de-a011-02ae6b9f7345",
                    "leftValue": "={{ $json.body.data.message.senderKeyDistributionMessage.groupId }}",
                    "rightValue": "120363420981315626-group",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8563a4ba-fbc9-4288-a3f9-566f8fb134cb",
                    "leftValue": "={{ $json.body.data.message.senderKeyDistributionMessage.groupId }}",
                    "rightValue": "120363419000321508-group",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none",
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -10640,
        176
      ],
      "id": "bab218f7-c7fb-45f7-8201-dbe5d55c2ec6",
      "name": "Que Grp?",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "19592785-3f85-493a-bfcd-b124873afc6f",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "5512982113000",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "2893267a-2090-433b-b5a4-2ab3999e376e",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "551239313000",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "892182a8-3d5f-4aa1-96fa-9dd34e68b674",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "55129918530009",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6d170522-e390-477f-9423-0f1174c559e5",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "5512982813000",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "7299b7d1-da7d-483a-8065-d14ad7ccb600",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "5512988214510",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "8a6f5f54-37ac-42bd-aff4-3df4952fe549",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "5512991550462",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -10848,
        -480
      ],
      "id": "6d360c63-89e1-4737-a39e-d151a85fdb15",
      "name": "Filtro Davi",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.msgContent.audioMessage.url }}",
                    "rightValue": "mmg",
                    "operator": {
                      "type": "string",
                      "operation": "notContains"
                    },
                    "id": "03a62020-cbc0-4d01-8c83-cb71bda3ad0f"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cbad2218-264c-4a8c-ac39-7d6bfe8653d9",
                    "leftValue": "={{ $('Webhook').item.json.body.msgContent.audioMessage.url }}",
                    "rightValue": "mmg",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -6912,
        -464
      ],
      "id": "ff9e7cb2-3117-43ae-9b4b-578a90cf7cb1",
      "name": "TXT or AUD",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {
          "responseFormat": "text"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2896,
        -608
      ],
      "id": "f7c56792-cdbe-4822-9719-7c4da1dfbe84",
      "name": "LLM",
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2272,
        -480
      ],
      "id": "07c0f050-22b2-470b-8f31-3f62cce71c19",
      "name": "Parse AI",
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1264,
        -592
      ],
      "id": "df87cb87-39c0-44c7-9d08-7277ec800a5c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('AI Agent').item.json.output }}",
        "options": {
          "systemMessage": "=Você é um analista de JSON com o único objetivo de analisar se deve ou não desativar a conversa através da tool (Status) caso perceba que a conversa foi redirecionada para o técnico ou um atendente humano, caso a conversa esteja percorrendo um clima muito negativo, ou caso o prompt peça para o cliente aguardar ou esperar, ou caso você entenda através da tool (Check) que a conversa terminou, encerre-a.\n\n**Não desative em frases como (Precisarei encaminhá-lo ao nosso técnico responsável.)\nou (Posso ajudá-lo com isso?).\n\nAntes de comecar qualquer análise, puxe o histórico da tool Redis de nome (Check) e use o retorno como hístorico da conversa.Voce DEVE levar em conta os dados retornados da tool Check.\n\nVocê só ira encerrar a conversa caso:\n-Veja no seu prompt que o atendende escreveu > **Encerrando meu atendimento por aqui.**\n#Não encerre a conversa caso não perceba nenhum destes sinais.\n\n#Nunca encerre a conversa caso o agente esteja aguardando alguma resposta.\n\n#Seu output será APENAS \"Ativo\" ou \"Desativado\"\n#Sempre envie o seu output para a tool (Status)\n\nSegue abaixo em JSON, o histórico da conversa:\n\n{{ $json.DB }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1232,
        -848
      ],
      "id": "1c5a8c5e-33ef-420b-8575-78ffbf88a124",
      "name": "Avaliador"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c5b15db5-2a3b-4876-82af-efd2616c0de5",
                    "leftValue": "={{ $('Mensagem Lead').item.json.Mensagem }}",
                    "rightValue": "falacomigobb",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status1 }}",
                    "rightValue": "Desativado",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "591c2c7d-cf9b-4fd9-8b4c-27b5588cd0ea"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7224b73-6752-4f94-8d39-61dca14c24dc",
                    "leftValue": "={{ $json.status1 }}",
                    "rightValue": "Ativo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c5ef8092-516f-4cd0-8f4d-034499780e49",
                    "leftValue": "={{ $json.status1 }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "allMatchingOutputs": false
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -7952,
        -480
      ],
      "id": "0e95471f-4db8-479b-928a-fbf60c8cb268",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "atl",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -7392,
        -672
      ],
      "id": "3763a335-a444-43de-9b52-24f436976d3d",
      "name": "Redis5",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "value": "Ativo",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -7648,
        -672
      ],
      "id": "3f372ee6-8b26-4f92-945c-dcd10009946a",
      "name": "status",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "status1",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -8112,
        -464
      ],
      "id": "ec1e5a03-f925-4065-835e-b5616a7c4298",
      "name": "GetStat",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "value": "={{ $json.output }}",
        "keyType": "string",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -768,
        -848
      ],
      "id": "ea580b0a-ede7-4874-b4de-469b2265e260",
      "name": "Redis6",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5392,
        -512
      ],
      "id": "6f5cc3a6-e10e-4b17-9c1b-6a47245a2d9e",
      "name": "Wait2",
      "webhookId": "57eac84a-ce2d-4739-a3fc-f76dc268657e",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Funcionamento",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -2560,
        -640
      ],
      "id": "506ead90-fcbd-472e-9294-9d8f722e5827",
      "name": "Funcionamento",
      "credentials": {
        "supabaseApi": {
          "id": "r7qiHeLbj3sFTwB4",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "zsD7q5SeGKDY3bpp",
          "mode": "list",
          "cachedResultName": "Horario"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -10208,
        192
      ],
      "id": "ddd4f45c-02e0-4b8a-bb55-cca591f23448",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -4720,
        -848
      ],
      "id": "6e17560d-0d7b-4ac9-a671-a48f61a65e7c",
      "name": "Deleta Buffer",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -5552,
        -512
      ],
      "id": "f70c5a82-425e-4ed8-a385-ee943ba319a8",
      "name": "Get Buffer 1",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -5216,
        -512
      ],
      "id": "b4a24190-1424-4426-9070-3e14527b6818",
      "name": "Get Buffer 2",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "id": "182c3295-e4ec-4422-8dc1-5a65e6556057",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -8416,
        -784
      ]
    },
    {
      "parameters": {
        "tableId": "Usuarios",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "usuarios",
              "fieldValue": "={{ $('Lead').item.json.Nome }}"
            },
            {
              "fieldId": "numero",
              "fieldValue": "={{ $('Lead').item.json.Telefone }}"
            }
          ]
        }
      },
      "id": "3691686f-2cef-4578-8e51-48b04102cd05",
      "name": "Criar Cliente",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -8576,
        -752
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "r7qiHeLbj3sFTwB4",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.numero }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "6d29bce9-997b-40cc-9e10-7658e6b6957c"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a9fedeb7-8e71-4610-a47b-269a4daabd6f",
                    "leftValue": "={{ $json.numero }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -8736,
        -784
      ],
      "id": "891e8129-97ee-4558-8243-689ed99efd39",
      "name": "Switch1",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -7536,
        -288
      ],
      "id": "83ea6687-b453-4546-a68d-42224863dd0c",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "639cb065-4e74-47bc-bd4d-ed007ee25eff",
              "leftValue": "={{ $json.body.data.key.participant }}",
              "rightValue": "5512982113000@s.whatsapp.net",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -10416,
        32
      ],
      "id": "5d6fcf6a-52e3-49a3-b4ab-fbe0183162d4",
      "name": "Ger. Produtos"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5fe25fe7-25b2-4650-aa3d-ef33f24dd0af",
              "leftValue": "={{ $json.body.phone }}{{ $json.body.participantPhone }}",
              "rightValue": "120363420981315626-group5512982113000",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "0532fcca-a591-4500-88f6-5d12061c0395",
              "leftValue": "={{ $json.body.text.message}}",
              "rightValue": "Cleiton,",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -10416,
        192
      ],
      "id": "755468e7-70c5-4ea3-b1d3-0aae2aa679a2",
      "name": "Horário"
    },
    {
      "parameters": {
        "jsCode": "const nomeCompleto = $('Lead').first().json.Nome || '';\nconst primeiroNome = nomeCompleto.trim().split(' ')[0] || '';\n\nreturn {\n  json: {\n    primeiroNome,\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8992,
        -464
      ],
      "id": "9fbf7da9-cb30-4ab5-aeca-8bf581bf7da9",
      "name": "1o Nome"
    },
    {
      "parameters": {
        "outputFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -4432,
        -848
      ],
      "id": "9ba3f280-e06f-4f0a-bc53-d7c4a3314790",
      "name": "Data"
    },
    {
      "parameters": {
        "jsCode": "const meses = [\n  'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho',\n  'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'\n];\n\nreturn items.map(item => {\n  const data = new Date(item.json.data);\n\n  // Ajuste de fuso se necessário:\n  // data.setHours(data.getHours() - 4);\n\n  const mesExtenso = meses[data.getMonth()];\n  const mesCapitalizado = mesExtenso.charAt(0).toUpperCase() + mesExtenso.slice(1);\n\n  item.json.mes_extenso = mesCapitalizado;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4304,
        -848
      ],
      "id": "597c166c-844c-4b15-aab3-b9a81f7b4276",
      "name": "Mes1"
    },
    {
      "parameters": {
        "jsCode": "// Obtém a data original em string e converte para objeto Date\nconst inputDateStr = $('Data').first().json.data;\nconst inputDate = new Date(inputDateStr);\n\n// Subtrai 1 hora manualmente (ajuste de -04:00 para -03:00)\ninputDate.setHours(inputDate.getHours() - 3);\n\n// Formata a data no padrão brasileiro\nconst dia = String(inputDate.getDate()).padStart(2, '0');\nconst mes = String(inputDate.getMonth() + 1).padStart(2, '0');\nconst ano = inputDate.getFullYear();\nconst hora = String(inputDate.getHours()).padStart(2, '0');\nconst minuto = String(inputDate.getMinutes()).padStart(2, '0');\n\nconst dataFormatada = `${dia}/${mes}/${ano} ${hora}:${minuto}`;\n\n// Retorna resultado\nreturn [\n  {\n    json: {\n      dataFormatada\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4160,
        -848
      ],
      "id": "3c4a3c8b-7f3f-417f-a308-0f63bf51195e",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const dataString = item.json.dataFormatada; // Ex: \"15/07/2025 15:01\"\n\n  // Converte string BR para ISO (yyyy-mm-ddTHH:MM:00)\n  const partes = dataString.split(/[\\s/:]/); // [dia, mês, ano, hora, minuto]\n  const dataISO = `${partes[2]}-${partes[1]}-${partes[0]}T${partes[3]}:${partes[4]}:00`;\n\n  const data = new Date(dataISO);\n  const horaAtual = data.getHours();\n\n  let saudacao;\n\n  if (horaAtual >= 6 && horaAtual < 12) {\n    saudacao = \"Bom dia\";\n  } else if (horaAtual >= 12 && horaAtual < 18) {\n    saudacao = \"Boa tarde\";\n  } else {\n    saudacao = \"Boa noite\";\n  }\n\n  item.json.saudacao = saudacao;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4016,
        -848
      ],
      "id": "efcc19e3-0b9b-47cb-b7db-ac5ba8872642",
      "name": "Sauda2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "562f4574-659b-4b90-b885-d6acdb3e2e13",
              "name": "mensagens",
              "value": "={{ $('Get Buffer 2').item.json.mensagens.join(\"\\n\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4576,
        -848
      ],
      "id": "20639ee9-c79e-4605-a7c8-76343c28c391",
      "name": "Join",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Mensagem Lead').item.json.Mensagem }}",
        "options": {
          "systemMessage": "=Você é uma IA com foco em saudar o cliente segundo o horário.\n\nNome={{ $('1o Nome').item.json.primeiroNome }}\n\n##Diretriz primária: SOMENTE SAUDAR O CLIENTE CASO ELE SAUDE OU SEJA A PRIMEIRA INTERAÇÃO SALVA\n\n#DIRETRIZ PRINCIPAL: SAUDAR SEMPRE DE ACORDO COM O HORÁRIO, IGNORAR COMPLETAMENTE O INPUT DO USUÁRIO\n\ncurrent_time = {{ $json.dataFormatada }}\n\nSAUDAÇÃO INICIAL\n\nVerificar horário com a tool current_time e ajustar saudação:\n\n1. Ótimo dia, [nome]! = (antes de 12h)\n\n2. Ótima tarde, [nome]! = (entre 12h e 18h)\n\n3. Ótima noite, [nome]! = (após 18h)\n\nSua reposta conterá APENAS a saudação, de 1 a 3, EX:\n\n-Human: \"Oi\"\n\nHorário: 12:32\n*AI viu que o horário bate com o da saudação 2.*\n\n-AI: \"Ótima tarde, Davi!\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3760,
        -1568
      ],
      "id": "3011dd7e-1e80-43c4-8db9-b83b18b201b5",
      "name": "AI Agent2",
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3760,
        -1360
      ],
      "id": "f565fdd3-aefd-441e-b55e-4e5ffd07f953",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "91f02795-5796-4845-94ea-289b469f4ae7",
              "leftValue": "={{ $json.output }}",
              "rightValue": "=Ótima tarde, {{ $('1o Nome').item.json.primeiroNome }}!",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "5b632051-9439-46d8-89a7-80d70e07dd94",
              "leftValue": "={{ $json.output }}",
              "rightValue": "=Ótimo dia, {{ $('1o Nome').item.json.primeiroNome }}!",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "708a3dd9-fb0f-49a8-8b37-f136aef51f22",
              "leftValue": "={{ $json.output }}",
              "rightValue": "=Ótima noite, {{ $('1o Nome').item.json.primeiroNome }}!",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3440,
        -1568
      ],
      "id": "19a04ef4-a097-491f-8060-ee0df0cd6126",
      "name": "If1",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "58864ebc-824c-47cf-a5eb-49fd54193c14",
              "name": "output",
              "value": "null",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3248,
        -1504
      ],
      "id": "1c644a44-1f59-4c54-99ea-98c737721b21",
      "name": "Edit Fields",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01d20e0a-253c-47df-9d6c-24ac2180f922",
              "leftValue": "={{ $('Get Buffer 3').item.json.mensagens.last() }}",
              "rightValue": "={{ $('Get Buffer ').item.json.mensagens.last() }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "c854517f-8a28-4bb6-ac33-eb8b07777a22",
              "leftValue": "={{ $json.Locked }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -10768,
        -1888
      ],
      "id": "082685e9-2cf7-418a-83b4-e810e8eb2106",
      "name": "If Redis OK1"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -11008,
        -2320
      ],
      "id": "2d6e21a1-ffd3-43bb-90bb-b5be7050a6dd",
      "name": "Wait3",
      "webhookId": "57eac84a-ce2d-4739-a3fc-f76dc268657e",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3e6829d4-a8a5-4253-a4c8-57f24dc80a25",
              "leftValue": "={{ $('Webhook').item.json.body.forwarded }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -11056,
        -1888
      ],
      "id": "59e98b8c-a524-4534-b481-d3e89a03642c",
      "name": "Não encaminhada1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "575c2511-e5c8-43f8-acd9-e5448d43bcda",
              "leftValue": "={{ $('Webhook').item.json.body.forwarded }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -11056,
        -2064
      ],
      "id": "2edcd30d-5c2d-416b-9ff4-2cc377ecfdc2",
      "name": "Encaminhada1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -10592,
        -1872
      ],
      "id": "39567045-d734-450f-aced-81457cb5d57b",
      "name": "Loop1"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_lock",
        "value": "true",
        "expire": true,
        "ttl": 40
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10640,
        -2080
      ],
      "id": "f5bc153b-b8a3-4734-8343-db1dd2b65515",
      "name": "Lock process1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "21000688-f298-408a-bada-726bbfa2e218",
              "leftValue": "={{ $json.mensagens[0] }}",
              "rightValue": "[null]",
              "operator": {
                "type": "boolean",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -11232,
        -1968
      ],
      "id": "7c63bd51-5503-445c-9d60-2458337b25ba",
      "name": "If2"
    },
    {
      "parameters": {
        "content": "## Buffer avançado com filtragem simultânea múltipla (Forwarding)",
        "height": 800,
        "width": 1100,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -11440,
        -2432
      ],
      "id": "3a6a1f50-15b7-4c40-ad40-feccfd26ff32",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10496,
        -2080
      ],
      "id": "772cabbd-02ed-41d7-8c3f-6bf9eb64a25e",
      "name": "Deleta Buffer1",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Locked",
        "key": "={{ $('Lead').item.json.Telefone }}_lock",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10912,
        -2064
      ],
      "id": "e90fca42-e7c5-473f-b8d4-eafa9432de0a",
      "name": "Check Lock1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -11296,
        -2320
      ],
      "id": "0c54a7ed-7ab0-4233-ae9d-58a045e056d6",
      "name": "Get Buffer ",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10720,
        -2320
      ],
      "id": "8150d5ce-69ec-42a5-82ba-7486de40770f",
      "name": "Get Buffer 3",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Locked",
        "key": "={{ $('Lead').item.json.Telefone }}_lock",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10912,
        -1888
      ],
      "id": "0bc8a4e9-4239-4855-81e0-fdb17057263f",
      "name": "Check Lock Too1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=5512982113000_check",
        "value": "=Ativo",
        "keyType": "string",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2720,
        16
      ],
      "id": "941d0c53-e06b-4d4e-936b-0e53812ced79",
      "name": "Redis7",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_msg",
        "value": "={{ $('Webhook').item.json.body.messageId }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -9488,
        -320
      ],
      "id": "d0eaf092-594d-4234-8f4f-69fe608cd99a",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_msg",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -10032,
        -432
      ],
      "id": "e5d9bce9-304e-4392-9f9a-e9bb88b95433",
      "name": "Get Buffer1",
      "executeOnce": true,
      "retryOnFail": false,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f45894f6-038e-4e41-95fa-4d302d638794",
              "leftValue": "={{ $json.mensagens }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9728,
        -432
      ],
      "id": "3177ebde-0476-4263-b8ea-26e282530230",
      "name": "If3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "19626244-f0e4-4f6c-82bd-53810b6ab6d1",
              "leftValue": "={{ $json.mensagens.last() }}",
              "rightValue": "={{ $('Get Buffer 1').item.json.mensagens.last() }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5056,
        -512
      ],
      "id": "a2fa32e0-a93c-4f1c-9ec4-35f24613f5cb",
      "name": "If4"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Lead').item.json.Telefone }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3760,
        -304
      ],
      "id": "050de248-477c-486e-a9ed-100304c5d231",
      "name": "Get Buffer 4",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2dcea664-7257-45bf-be54-1168bdc13ff3",
              "leftValue": "={{ $json.mensagens }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3600,
        -304
      ],
      "id": "eea20015-a95e-4a86-8d80-cc779eb62888",
      "name": "If5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -3392,
        -128
      ],
      "id": "71d88d96-2308-4ca4-9d2d-64aac674ab25",
      "name": "Organização3"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Lead').item.json.Telefone }}_msg"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -7536,
        -480
      ],
      "id": "01e8e31c-50b3-4060-8c63-5109bb11c2d8",
      "name": "Delete Msg ID Buffer 1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Lead').item.json.Telefone }}_msg"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3920,
        -304
      ],
      "id": "14e1ce83-9862-41cb-95f0-bf590755c8af",
      "name": "Delete MSG ID Buffer",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Lead').item.json.Telefone }}_DB.tmp",
        "messageData": "={{[$json.dbtemp[0], $json.dbtemp[1]]}}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -4080,
        -304
      ],
      "id": "0e5a9a01-5b15-4c06-8f9f-a7a9d877da30",
      "name": "Redis2",
      "retryOnFail": false,
      "maxTries": 2,
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "dbtemp",
        "key": "={{ $('Lead').item.json.Telefone }}_DB",
        "keyType": "list",
        "options": {
          "dotNotation": false
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -4208,
        -304
      ],
      "id": "e894c161-9e0b-47f4-8767-438813e8ccca",
      "name": "Redis4",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_DB.tmp",
        "value": "={{ [ $json.dbtemp[0], $json.dbtemp[1] ] }}",
        "keyType": "sets",
        "expire": true,
        "ttl": 18000
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1856,
        32
      ],
      "id": "e31606a3-ab71-4f96-a5ff-dd781a10cca7",
      "name": "Redis9",
      "retryOnFail": false,
      "maxTries": 2,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ [$json.Input[0], $json.Input[1]] }}",
        "options": {
          "systemMessage": "=Você é um agente com foco em categorização e resumo de conversas de uma assistência técnica com o cliente.\n\n  Seu objetivo é resumir a necessidade do cliente em menos de 100 caracteres e também categorizar essa conversa em 5 categorias: Televisão e afins; Computador e afins; Notebook e afins; Monitor e afins; Microondas e afins.\n\nApós a categorização da mensagem você deve definir para qual técnico o contato será passado:\n\n  Televisão e afins = Claudinei \n  Computador e afins = César\n  Notebook e afins = César\n  Monitor e afins = César\n  Microondas e afins = Claudinei\n\nApós todas as etapas concluídas preencha seu output da seguinte forma:\n\n\n \"⚠️[Nome do técnico], atendimento automático encerrado.\n\n👤 Cliente: *{{ $('Webhook').item.json.body.senderName }}* \n📱 Número: *{{ $('Webhook').item.json.body.phone }}* \n\n📬 Relatório: _[Resumo da necessidade do cliente]_\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        16,
        -848
      ],
      "id": "9f86e030-9689-44d4-9eca-b7d3e9dfe5bc",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        16,
        -640
      ],
      "id": "3f2b02cd-5986-4dda-a1ec-68b445fdf16a",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "sB9sHBeXxAJCJTEo",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "Input",
        "key": "={{ $('Lead').item.json.Telefone }}_DB.tmp",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -208,
        -912
      ],
      "id": "c0a3c7ca-d832-4025-be6d-f266521c47b5",
      "name": "Redis10",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Lead').item.json.Telefone }}_DB.tmp"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        336,
        -848
      ],
      "id": "90bebd7a-2ff1-4b14-b7fd-1153972a7714",
      "name": "Del DB Tmp",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "César",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "d8315e5f-bb49-4541-a4e3-fe8bd44ae002"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c0520a07-59c0-44c4-b9c8-cca04d14afad",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "Claudinei",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f3e239d8-bf72-4502-8f0d-8a5bfb0ad890",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "Davi",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        528,
        -848
      ],
      "id": "3820557d-4314-4b43-a408-6cdce098a8a0",
      "name": "Switch2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E29DB01364090EFDC8006E9A5181015/token/771E4BE1F789AB112E4831D6/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "5512982113000"
            },
            {
              "name": "message",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        -1008
      ],
      "id": "3b639237-d5f2-4637-b817-7d674adad96b",
      "name": "Relat. Cesar",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Gx5XA9roLVkNIKBs",
          "name": "Z-API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E29DB01364090EFDC8006E9A5181015/token/771E4BE1F789AB112E4831D6/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "5512982113000"
            },
            {
              "name": "message",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        -848
      ],
      "id": "29e91a38-fa65-4607-95a3-8e25d94c858d",
      "name": "Relat. Nei",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Gx5XA9roLVkNIKBs",
          "name": "Z-API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E29DB01364090EFDC8006E9A5181015/token/771E4BE1F789AB112E4831D6/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "5512982113000"
            },
            {
              "name": "message",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        -688
      ],
      "id": "a3d98e36-2bf8-4bdf-ae71-93ac40b2674c",
      "name": "Relat. Davi",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Gx5XA9roLVkNIKBs",
          "name": "Z-API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "af294180-9d51-4891-ac06-abe8c8dc5893",
              "leftValue": "={{ $json.status1 }}",
              "rightValue": "Desativado",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -432,
        -848
      ],
      "id": "f08b9153-a018-41f2-bf2b-416bac588dce",
      "name": "If7"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "status1",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -592,
        -848
      ],
      "id": "f3813777-d481-4417-a6be-c2806c22af0a",
      "name": "GetStat1",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Avalia e trava agente IA",
        "height": 480,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1536,
        -928
      ],
      "id": "97f60836-19b8-4396-990f-29ddd2de3311",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Envia Relatório da Lead Pronta para o técnico",
        "height": 580,
        "width": 1780,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        -1040
      ],
      "id": "79dd5778-a7cd-466a-acae-9a9d58da8b45",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1504,
        -368
      ],
      "id": "4bdbb946-bfe9-4ccf-b8c2-e7ac32131f2a",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "content": "## Define Saudações e Horários",
        "height": 360,
        "width": 900
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4752,
        -960
      ],
      "id": "85f17d12-c492-4732-b305-56b31e4866ce",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Agente Para Saudação",
        "height": 440,
        "width": 820
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3872,
        -1680
      ],
      "id": "b6ab6486-5846-4df7-b7a6-db4e9075daf5",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Agente Conversacional e Parser",
        "height": 580,
        "width": 1260,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2912,
        -944
      ],
      "id": "efe555e9-a04d-45e1-a37a-b61f6593bb37",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Envia Mensagens e loop Buffer",
        "height": 520,
        "width": 1540,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4768,
        -464
      ],
      "id": "aa8a4528-db56-444c-91cb-b1829a2d9ced",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Buffer\n",
        "height": 340,
        "width": 780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5632,
        -592
      ],
      "id": "98c6eace-d3c2-4517-950b-71deed0fbdef",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Filtragem Comandos e Travas",
        "height": 620,
        "width": 1120,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -8160,
        -704
      ],
      "id": "904a3a32-d491-4fa5-9059-aadbf8c2b176",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## Inicia Buffer + Filtro TXT or Audio",
        "height": 440,
        "width": 1220,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6976,
        -624
      ],
      "id": "d877a775-f2e4-4b66-bf18-7f12b8c600fb",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## FromMe e Set MessageID\nPra que MsgID? Para impedir que diversos processos respondam a mesma conversa simultâneamente, o primeiro processo a pegar a mensagem pode responder.",
        "height": 560,
        "width": 1220,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10336,
        -704
      ],
      "id": "b21f5c5d-8661-4b3f-ab95-cec9e81663a1",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ce44d552-db37-4741-b37a-9f8fc25c8990",
              "leftValue": "={{ $('Webhook').item.json.body.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -10256,
        -480
      ],
      "id": "03c76287-058c-4215-862c-9b5213273e9a",
      "name": "IF FromMe"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8c7f3257-668c-42f8-be0f-af2809c8905b",
              "leftValue": "={{ $('Mensagem Lead').item.json.Mensagem }}",
              "rightValue": "#Max - Atendimento virtual",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "86335049-6866-4a5c-83dd-953bc802884d",
              "leftValue": "={{ $('Mensagem Lead').item.json.Mensagem }}",
              "rightValue": "⚠️",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -10032,
        -592
      ],
      "id": "9d5922ac-57ce-4edd-91f5-178600a621cc",
      "name": "IF Not From Max"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Lead').item.json.Telefone }}_check",
        "value": "=Desativado",
        "keyType": "string",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -9728,
        -608
      ],
      "id": "ffd3a647-5708-42bb-85ef-f7cde1eab260",
      "name": "Block Agente",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Criar Cadastro",
        "height": 340,
        "width": 800
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9024,
        -560
      ],
      "id": "c712b9d2-31fe-40da-ba3f-14eb82c4e043",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "msgID",
        "key": "={{ $('Lead').item.json.Telefone }}_msg",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -6112,
        -480
      ],
      "id": "b43ff570-51d8-461e-bba8-faa3b39be66f",
      "name": "Get MsgID",
      "executeOnce": true,
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a0ba33dd-8d0b-4673-bf52-ba7954e29370",
              "leftValue": "={{ $json.msgID }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "f6b79ed2-cb77-402a-b3a4-f8d5b179f4ba",
              "leftValue": "={{ $json.msgID }}",
              "rightValue": "={{ $('Webhook').item.json.body.messageId }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5888,
        -480
      ],
      "id": "001055b1-10d8-4d28-ae23-6da944151817",
      "name": "If MsgID OK"
    },
    {
      "parameters": {
        "content": "## WebHook + Definição de Dados",
        "height": 300,
        "width": 1060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -11488,
        -592
      ],
      "id": "9bd8470e-fb61-40cb-b92e-1d77484f6edd",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## Starter para grupos internos",
        "height": 440,
        "width": 720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10688,
        -48
      ],
      "id": "1102fbeb-0575-4e0b-bd12-c71162602dc7",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d2a959c6-58a2-495d-a2a0-ad7202d81939",
              "leftValue": "={{ $json.body.waitingMessage }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -11296,
        -480
      ],
      "id": "20752cc5-3167-4f6f-a868-bbfa90415d59",
      "name": "If9"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "usuarios",
          "mode": "list",
          "cachedResultName": "usuarios"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "numero",
              "value": "={{ $('Lead').item.json.Telefone }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -8752,
        -464
      ],
      "id": "bd8d7265-59ed-4cfc-b00b-5497249a29f5",
      "name": "Select rows from a table",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ZEobhMYEeazW7SRl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('If9').item.json.body.phone }}_DB.tmp",
        "keyType": "list",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -208,
        -752
      ],
      "id": "aaff278a-6e4f-4ec1-b56c-fecf1f125143",
      "name": "Redis8",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "DB",
        "key": "={{ $('Lead').item.json.Telefone }}_DB",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1504,
        -848
      ],
      "id": "f1ce4194-027a-4128-9db0-07113c8424fe",
      "name": "Redis11",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e2431148-5c14-4120-bde4-0179d4513949",
              "name": "DB",
              "value": "={{ $json.DB }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1360,
        -848
      ],
      "id": "b77d0f61-ed07-4f70-a2b4-b52defcfae51",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Lead').item.json.Telefone }}_DB",
        "sessionTTL": 86400,
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        -2784,
        -640
      ],
      "id": "ce1436aa-ada1-4101-8b73-1056e6f4ac91",
      "name": "Memory",
      "credentials": {
        "redis": {
          "id": "Y9iYyrM7JSw5IMqj",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Join').item.json.mensagens }}",
        "options": {
          "systemMessage": "=>>> 🚨 REGRA DE PRIORIDADE MÁXIMA (para GPT-5-mini)\n\n1) Gatilho absoluto\n   - SE a mensagem do usuário for **exatamente**:\n       falacomigobb\n     - RESPONDA APENAS E UNICAMENTE com:\n       Faaaala chefe! Modo desenvolvedor ativado, já renovei seu token, fala comigo!\n     - Nenhuma outra palavra, saudação ou caractere adicional.\n\n---\n\n## 🤖 IDENTIDADE E PAPEL\n\n- Você é **Max**, o **assistente virtual profissional** da  \n  **Assistência Técnica Leão de Judá**.  \n- Endereço: Rua Nelson César de Oliveira, 203 – Jardim das Indústrias, São José dos Campos.\n- Deixe claro, quando necessário, que é um assistente virtual da empresa.\n\n---\n\n## 🎯 OBJETIVO\n\n- Atender o cliente de forma natural, empática e eficiente.  \n- **Responder o máximo possível dentro do seu escopo.**  \n- **Somente encerrar o atendimento** se:\n  1. Precisar **transferir para o técnico**, ou  \n  2. **Não tiver resposta** dentro das diretrizes.\n\n---\n\n## 💬 TOM E ESTILO\n\n- Profissional, educado e simpático — sempre prestativo.\n- Frases curtas e diretas, mas **nunca robóticas**.\n- Use variações naturais como “Claro!”, “Perfeito!”, “Entendido!”, “Sem problema!”.\n- Evite respostas secas como “Horário: ...” — prefira algo mais humano.\n- Evite repetir o endereço e o horário diversas vezes.\n\n---\n\n## 👋 SAUDAÇÃO INICIAL\n\n- Se o cliente **apenas cumprimentar:**\n  > “Olá, {{ $('1o Nome').item.json.primeiroNome }}! 😊  \n  > Como posso te ajudar hoje?”\n\n- Se o cliente **já trouxer uma dúvida logo na primeira mensagem:**\n  > “Olá, {{ $('1o Nome').item.json.primeiroNome }}! 😊\"\n\n- Cite o nome **apenas na primeira mensagem**.  \n- Não repita saudações se já tiver iniciado o contato.\n\n---\n\n## 🧰 ESCOPO DE SERVIÇOS\n\nA assistência trabalha com:\n\n- **Manutenção e conserto:** PCs, Notebooks, Monitores, Micro-ondas, TVs, All-in-One, MacBooks (exceto celulares).  \n- **Vendas:** Peças, componentes, periféricos, montagem de PCs gamer/profissional (consultar o técnico para disponibilidade).  \n- **Vendas de aparelhos:** TVs, Notebooks e Monitores (também mediante consulta ao técnico).  \n- **Importante:** Não fazemos **retirada de aparelhos a domicílio**.\n\nNunca diga “não temos” — sempre diga que **vai verificar com o técnico**.\n\n---\n\n## ⚙️ FLUXO DE ATENDIMENTO\n\n1. **Saudação inicial** (como descrito acima).  \n2. **Entendimento:** deixe o cliente descrever o problema sem pedir detalhes técnicos de início.  \n3. **Coleta mínima:** quando necessário, peça modelo do aparelho e breve descrição.  \n4. **Responda o que estiver no escopo** com clareza e naturalidade.  \n5. **Encaminhe para o técnico sempre que:**\n   - O cliente pedir ajuda técnica ou diagnóstico.\n   - Houver dúvida sobre peça, preço ou disponibilidade.\n   - Situação fora do escopo, incluindo:\n       - Solicitar marcação de acompanhamento ou lembretes.\n       - Pedidos de avisos ou notificações futuras.\n       - Qualquer funcionalidade que envolva agendamento automático.\n   - Perguntas sobre a identidade da IA.\n\n   Ao encaminhar, diga:\n   > “Entendido. Vou encaminhar seu atendimento ao técnico responsável, tudo bem?”  \n   > **Encerrando meu atendimento por aqui.**\n\n6. **NUNCA encerre automaticamente** quando a dúvida estiver dentro do escopo (exemplo: horário, endereço, tipo de serviço ou dúvidas gerais).  \n   Nesses casos, apenas responda e mantenha o canal aberto.\n7. Utilize a tool (Memory) apenas como contexto para suas respostas, não responda as mesmas perguntas novamentes. Apenas responda as perguntas do Prompt.\n\n---\n\n## 🕒 CONSULTAS FREQUENTES\n\n- **Horário de funcionamento:**\n  > “Claro! Nosso horário de funcionamento é de segunda a sexta, das 8h às 18h, e aos sábados das 8h às 13h.”\n\n- **Endereço:**\n  > “Estamos na Rua Nelson César de Oliveira, 203 – Jardim das Indústrias, ao lado da lotérica.”\n\n- **Pedidos de peças ou aparelhos:**\n  > “Posso encaminhar seu pedido ao técnico para confirmar disponibilidade, tudo bem?”\n\n- **Pedidos de desconto:**\n  > “Posso verificar com o técnico a possibilidade de desconto via PIX.”\n\n---\n\n## 📩 ENCAMINHAMENTO / ENCERRAMENTO\n\n- **Encaminhar ao técnico:**\n  > “Entendido. Vou encaminhar seu atendimento ao técnico responsável, tudo bem?”  \n  > **Encerrando meu atendimento por aqui.**\n\n- **Quando não souber responder:**\n  > “Essa é uma dúvida mais específica, então vou encaminhar ao técnico responsável para te ajudar melhor.”  \n  > **Encerrando meu atendimento por aqui.**\n\n- **Somente use a frase “Encerrando meu atendimento por aqui.”**\n  quando o atendimento de fato terminar (transferência ou limitação).\n\n---\n\n## 🚫 RESTRIÇÕES\n\n- Não invente preços, prazos ou informações técnicas.  \n- Não diga “não sei” — apenas encaminhe ao técnico.  \n- Não encerre sem necessidade.  \n- Sempre mantenha um tom humano, educado e coerente com o papel de um atendente.\n\n---\n\n## ✅ EXEMPLOS DE INTERAÇÃO\n\n**Cliente:** “Bom dia.”  \n**Max:**  \n> “Olá, João! 😊  \n> Como posso te ajudar hoje?”\n\n---\n\n**Cliente:** “Qual o horário de funcionamento?”  \n**Max:**  \n> “Claro! Nosso horário de funcionamento é de segunda a sexta, das 8h às 18h, e aos sábados das 8h às 13h.”\n\n---\n\n**Cliente:** “Vocês consertam TV Samsung?”  \n**Max:**  \n> “Sim! Trabalhamos com conserto de TVs, inclusive da Samsung.  \n> Pode me contar qual o modelo e o tipo de problema que ela está apresentando?”\n\n---\n\n**Cliente:** “Quero comprar uma fonte para PC.”  \n**Max:**  \n> “Perfeito! Posso encaminhar seu pedido ao técnico para confirmar disponibilidade, tudo bem?”  \n> **Encerrando meu atendimento por aqui.**\n\n---\n\n**Cliente:** “Quem é o técnico principal?”  \n**Max:**  \n> “Posso confirmar essa informação com a equipe técnica, tudo bem?”  \n> **Encerrando meu atendimento por aqui.**\n\n---\n\nFIM DAS INSTRUÇÕES\n"
        }
      },
      "id": "118e0c81-afd9-486a-940a-da5cbcbba74f",
      "name": "AI Agent4",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -2352,
        -1168
      ],
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E29DB01364090EFDC8006E9A5181015/token/771E4BE1F789AB112E4831D6/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Lead').item.json.Telefone }}"
            },
            {
              "name": "message",
              "value": "=*#Max - Atendimento virtual*\n{{ $('Split Out').item.json['output.mensagens'] }}"
            },
            {
              "name": "delayTyping",
              "value": "3"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4384,
        -224
      ],
      "id": "9d716940-77ce-4de7-935b-d646389e9927",
      "name": "Z-API1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Gx5XA9roLVkNIKBs",
          "name": "Z-API"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -2448,
        -640
      ],
      "id": "200dfb84-68a9-4f0b-9acf-3e33acd83a30",
      "name": "Calculator"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "hayrMe7QpDgBDUbE"
  },
  "shared": [
    {
      "createdAt": "2025-08-02T01:36:18.118Z",
      "updatedAt": "2025-08-02T01:36:18.118Z",
      "role": "workflow:owner",
      "workflowId": "ZJhekDsrE4hWhX5f",
      "projectId": "O2voI4XYg26wWumH"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-09T23:46:44.000Z",
  "versionId": "13dda12a-8a83-4f70-a681-ce94aba08699"
}
{
  "active": false,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "(Z-API) Enviar Mensagem": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "(Z-API) Enviar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estrutura": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lead": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-02T01:25:27.818Z",
  "id": "0Ix2NA3lLsJENjd2",
  "isArchived": true,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Cleiton Noia",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "davi",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        112,
        -144
      ],
      "id": "eb08ca35-9c63-4cf1-8677-0abf938b9fe5",
      "name": "Webhook",
      "webhookId": "500a7aff-d381-4a34-9e4d-c8ec89221f72"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=Você é um agente de IA que simula perfeitamente Davi Moraes em conversas. Use o seguinte perfil de personalidade e estilo para responder todas as mensagens: [{\n  \"identidade\": {\n    \"nome\": \"Davi Moraes\",\n    \"apelidos_comuns\": [\"man\", \"Zé\", \"fi\", \"ksksksk\", \"ouou\", \"barru\"],\n    \"idade_aproximada\": \"jovem adulto\",\n    \"cristão\": true,\n    \"valores\": [\"fé\", \"família\", \"respeito\", \"honestidade\", \"trabalho\"]\n  },\n  \"comunicacao\": {\n    \"tom_geral\": \"amistoso, espirituoso e respeitoso\",\n    \"estilo\": \"coloquial inteligente\",\n    \"caracteristicas\": {\n      \"média_de_caracteres_por_mensagem\": 120,\n      \"usa_emojis\": true,\n      \"usa_figurinhas\": sim,\n      \"quebra_de_linha_para_efeito\": true,\n      \"abreviações\": [\"tá\", \"blz\", \"vamo\", \"q\", \"pq\", \"mano\", \"bora\", \"mt\"],\n      \"respostas_com_timing\": true,\n      \"reação_a_piadas\": \"riso leve ou sarcástico (ex: 'kkk', 'hahaha', 'hauahua')\",\n      \"nunca_usa_palavrões\": true,\n      \"evita_duplo_sentido\": true,\n      \"não_faz_insinuações\": true,\n      \"gírias_com_contexto_afetivo\": [\"man\", \"Zé\", \"fi\", \"ouou\"]\n    },\n    \"humor\": {\n      \"percentual_na_conversa\": \"35%\",\n      \"tipo\": [\"irônico leve\", \"auto-depreciativo cômico\", \"referencial (cultura pop e cotidiano)\", \"lúdico-afetivo (especialmente com família e amigos próximos)\"]\n    },\n    \"seriedade\": {\n      \"percentual_na_conversa\": \"65%\",\n      \"tipo\": [\"respeitoso\", \"prático\", \"direto\", \"afetuoso com limites claros\", \"voltado à fé e responsabilidade\"]\n    },\n    \"exemplos_de_expressões_comuns\": [\n      \"Fechooou\",\n      \"Tô tirando fi kkkkkk\",\n      \"Vish conta uma novidade\",\n      \"Rapidão\",\n      \"Tentei, mas deu ruim ksksksk\",\n      \"Fica com Deus!\",\n      \"Maior rolê\",\n      \"Zerei a prova hehehehe\",\n      \"Vou ver isso aí man\",\n      \"Kkk essa foi boa\",\n      \"Sério mesmo?\",\n      \"Salve papa doooooog\"\n    ]\n  },\n  \"contexto_social\": {\n    \"funções\": [\"atendente e técnico em assistência\", \"aluno de cursinho\", \"servo na igreja\", \"cuida da avó\"],\n    \"relações\": {\n      \"com_família\": \"respeitoso, carinhoso, brincalhão moderado\",\n      \"com_amigos\": \"parceiro, engraçado, protetor, sarcástico leve\",\n      \"com_clientes\": \"educado, prestativo, direto\",\n      \"com_estranhos\": \"respeitoso e objetivo\"\n    }\n  },\n  \"linguagem_emocional\": {\n    \"empatia\": \"alta\",\n    \"ironia\": \"moderada, sem ofensa\",\n    \"reação_a_conflito\": \"acalmar ou mudar de assunto com leveza\",\n    \"espiritualidade\": \"presente e integrada em valores e decisões\",\n    \"validações\": [\"beleza\", \"entendi\", \"tá certo\", \"amém\", \"vou tentar sim\"]\n  },\n  \"respostas_condicionais\": {\n    \"mensagem_com_emoji\": \"provável resposta também com emoji\",\n    \"piada_recebida\": \"resposta com riso ou piada complementar\",\n    \"mensagem_séria\": \"resposta direta, sem brincadeiras\",\n    \"referência_bíblica\": \"resposta com respeito e possível complementação\"\n  },\n  \"padrões_de_fluxo\": {\n    \"iniciação_de_conversa\": [\"Opa\", \"Salve\", \"E aí\", \"Oi mãe\"],\n    \"respostas_longas\": \"quebra de linha natural para fluidez\",\n    \"interação_áspera\": \"não responde com agressividade\",\n    \"encerramento\": [\"Fica com Deus!\", \"Tchau\", \"Valeu man\", \"Falou fi\"]\n  },\n  \"restricoes\": {\n    \"proibido_uso_de_palavras_de_baixo_calao\": true,\n    \"proibido_duplo_sentido\": true,\n    \"proibido_tom_sensual\": true,\n    \"proibido_ironia_ofensiva\": true\n  }\n}\n\n].\n\nSuas respostas devem:\n- Ter o mesmo tom irônico, espirituoso e realista.\n- Usar expressões típicas como “man”, “ksksksk”, “tlg”, “barro”.\n- Incluir emojis quando apropriado.\n- Escrever de forma informal, com abreviações e frases naturais.\n- Refletir emoção com autenticidade e toque cômico leve.\n- Manter mensagens curtas, porém com personalidade marcante.\n\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1152,
        -144
      ],
      "id": "b4f5c086-20f3-4266-a59d-82bcae5329ba",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1136,
        64
      ],
      "id": "81ace29c-1756-4360-b0c7-aae2a2220b4b",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bbce9ee4-f994-4601-83ba-88fb1632ae44",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "55129971997521",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "30408cb4-c52c-44b8-8681-33a6241eb484",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "551239313000",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "122403cc-0009-471b-a58e-012cb0c2293f",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "5512996742205",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        336,
        -144
      ],
      "id": "e4fd0af2-8b72-43c7-b3f5-51f65cfe2e81",
      "name": "Filter"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/3E29DB01364090EFDC8006E9A5181015/token/771E4BE1F789AB112E4831D6/send-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Lead').item.json.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json['output.mensagens'] }}"
            },
            {
              "name": "delayTyping",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "id": "366a1c51-48a1-4b97-8ec0-fcf0e8bf7bb8",
      "name": "(Z-API) Enviar Mensagem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2624,
        16
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        1760,
        16
      ],
      "id": "ca05e15b-2230-49dc-81c0-77c6d44f3c21",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<mensagem_do_usuario>\n{{ $json.output }}\n</mensagem_do_usuario>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=#Apenas estruture o XML <mensagem_do_usuario> no formato JSON solicitado no output parser Estrutura e seguindo as instruções de formatação abaixo. \nNão altere nada mais na mensagem \n\n## Formatação \n- Divida as mensagens para que fiquem naturais e humanizadas; \n- Divida as mensagens conforme estrutura do output parser para que não fiquem muito longas (maiores que 240 caracteres); \n- Não separe mensagens vazias; \n- Apenas separe sentenças completas;\n- Para negrito (bold) use apenas um nunca duas * (exemplo: negrito).\n\n\nExemplo de formato JSON:\n{\n\"mensagens\": [\"Mensagem 0\", \"Mensagem 1\", \"Mensagem 2\"]\n}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1632,
        -144
      ],
      "id": "a0102da0-7d09-4258-a34e-e2160eb36283",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.mensagens",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2192,
        -144
      ],
      "id": "4ec01cb5-f993-4c53-b102-797e7b3d7056",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2432,
        -144
      ],
      "id": "3c67a233-caa3-4ab6-96ef-902698fe544f",
      "name": "Loop Over Items",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2272,
        16
      ],
      "id": "a46b403e-febd-4b17-897a-8f64b1a7c5fe",
      "name": "Wait",
      "webhookId": "39955354-d054-4960-be7b-d15d7fa5da79"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"mensagens\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t},\n  \"required\": [\"mensagens\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1824,
        224
      ],
      "id": "05041534-68b4-476c-8432-19836a66eceb",
      "name": "Estrutura"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1712,
        224
      ],
      "id": "658fce53-0f3c-4a34-a259-68be39823250",
      "name": "Parse AI"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa7479e5-733f-4534-bc0a-676a31c534dc",
              "name": "phone",
              "value": "={{ $('Webhook').item.json.body.phone }}",
              "type": "string"
            },
            {
              "id": "a843540a-3b22-4319-bc4a-de2dde8c05c1",
              "name": "message",
              "value": "={{ $json.body.text.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        -144
      ],
      "id": "1501205e-5e90-4aef-8831-502119674f96",
      "name": "Lead"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Lead').item.json.phone }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1232,
        80
      ],
      "id": "fcfdb483-4065-49c1-b34a-1b3d254bc869",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-02T01:25:27.822Z",
      "updatedAt": "2025-08-02T01:25:27.822Z",
      "role": "workflow:owner",
      "workflowId": "0Ix2NA3lLsJENjd2",
      "projectId": "O2voI4XYg26wWumH"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-02T01:26:10.000Z",
  "versionId": "af3bc7ee-3433-48bd-a16e-d93464b19964"
}